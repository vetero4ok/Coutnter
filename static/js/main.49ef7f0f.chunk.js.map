{"version":3,"sources":["Button.tsx","Increments.tsx","Display.tsx","InputSettings.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","onClick","addItem","value","disabled","title","Increments","disabledInc","count","maxValue","startValue","disabledReset","addInc","resetCounts","Display","numberBold","InputSettings","type","min","max","onKeyPress","e","key","setValueSettings","currentTarget","onChange","string","number","JSON","parse","Settings","addValue","App","useState","setCount","setMaxValue","setStartValue","restoreState","defaultState","state","stateAsString","localStorage","getItem","useEffect","setItem","stringify","errorMassage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49ef7f0f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype PropsButtonType = {\r\n    title: string\r\n    addItem: (value?: number) => void\r\n    value?: number\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const Button = (props: PropsButtonType) => {\r\n    const Items = () => props.addItem(props.value)\r\n    return (\r\n        <div className={'buttons'}>\r\n            <button onClick={Items} disabled={props.disabled}>{props.title} </button>\r\n        </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport {Button} from './Button';\r\n\r\n\r\ntype propsIncCountsType = {\r\n    resetCounts: () => void\r\n    addInc: (count: number) => void\r\n    count: number\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport function Increments(props: propsIncCountsType) {\r\n    const Increments = () => {\r\n        props.addInc(props.count)\r\n    }\r\n    const disabledInc = props.count >= props.maxValue || props.startValue > props.maxValue\r\n    const disabledReset = props.count === props.startValue|| props.startValue > props.maxValue\r\n\r\n    return (\r\n        <div className={\"settings-buttons\"}>\r\n            <Button\r\n                title={'Inc'}\r\n                addItem={Increments}\r\n                disabled={disabledInc}\r\n            />\r\n            <Button\r\n                title={'Reset'}\r\n                value={props.count}\r\n                addItem={props.resetCounts}\r\n                disabled={disabledReset}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\ntype PropsDisplayProps = {\r\n    count?: number\r\n    numberBold: boolean\r\n    title?: string\r\n}\r\n\r\nexport const Display = (props: PropsDisplayProps) => {\r\n    return (\r\n\r\n        <div className={(props.numberBold ? 'text' : '')||(props.title? 'info':'')}>\r\n            {props.count}\r\n            {props.title}\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\n\r\ntype  InputSettingsProps = {\r\n    value: number\r\n    setValueSettings: (value: number) => void\r\n}\r\n\r\nexport const InputSettings = (props: InputSettingsProps) => {\r\n\r\n\r\n    const onKeyPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.setValueSettings(+e.currentTarget.value)\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let string = e.currentTarget.value\r\n        let number = JSON.parse(string)\r\n        props.setValueSettings(number)\r\n    }\r\n    return (\r\n        <span className=\"input-container\">\r\n            <input\r\n                type=\"number\"\r\n                min=\"0\" max=\"100\"\r\n                value={props.value}\r\n                className={'input'}\r\n                onKeyPress={onKeyPressEnter}\r\n                onChange={onChangeHandler}\r\n            />\r\n        </span>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport {InputSettings} from './InputSettings';\r\n\r\ntype PropsSettingsType = {\r\n    value: number\r\n    title: string\r\n    addValue: (value: number) => void\r\n\r\n}\r\n\r\nexport const Settings = (props: PropsSettingsType) => {\r\n\r\n    return (\r\n\r\n        <div className={'settingsDisplay'}>\r\n            <span className={'title'}>\r\n                {props.title}\r\n            </span>\r\n\r\n            <InputSettings\r\n                value={props.value}\r\n                setValueSettings={props.addValue}\r\n\r\n            />\r\n        </div>\r\n\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Increments} from './Increments';\nimport {Display} from './Display';\nimport {Settings} from './Settings';\nimport {Button} from './Button';\n\n\nfunction App() {\n\n    const [count, setCount] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState(0)\n    const [startValue, setStartValue] = useState(0)\n  //  const [error,setError] = useState<boolean>(false)\n    function restoreState<T>(key: string, defaultState: T) {\n        let state = defaultState\n        const stateAsString = localStorage.getItem(key)\n        if (stateAsString !== null) state = JSON.parse(stateAsString) as T\n        return state\n    }\n\n    useEffect(() => {\n        setCount(restoreState<number>('count', 0))\n        setMaxValue(restoreState<number>('maxValue', 0))\n        setStartValue(restoreState<number>('startValue', 0))\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }, [maxValue])\n    useEffect(() => {\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }, [startValue])\n    useEffect(() => {\n        localStorage.setItem('count', JSON.stringify(count))\n    }, [count])\n\n    function addMaxValue(value: number) {\n        setMaxValue(value)\n    }\n\n    function addStartValue(value: number) {\n        setStartValue(value)\n    }\n\n    function addInc(count: number) {\n        setCount(count + 1)\n    }\n\n    function resetCounts() {\n        setCount(startValue)\n    }\n\n    const setCounterToStart = () => {\n        setCount(startValue)\n    }\n    //const DisabledSet = maxValue === startValue\n    const numberBold = count === maxValue\n    const errorMassage = startValue <= maxValue\n    return (\n        <div className={'app'}>\n            <div className={'counter-wrapper'}>\n                <div className={'display'}>\n                    {errorMassage\n                        ? <Display\n                            count={count}\n                            numberBold={numberBold}\n                        />\n                        :<Display\n                            title={'max value can not be less or equal to min value'}\n                            numberBold={numberBold}\n                        />\n                    }\n                </div>\n                <div className={'display-buttons'}>\n                    <Increments\n                        addInc={addInc}\n                        resetCounts={resetCounts}\n                        count={count}\n                        maxValue={maxValue}\n                        startValue={startValue}\n\n                    />\n                </div>\n\n            </div>\n            <div className={'settings-wrapper'}>\n                <div className=\"settings-displays\">\n                    <Settings\n                        value={startValue}\n                        addValue={addStartValue}\n                        title={'start value:'}\n                    />\n                    <Settings\n                        value={maxValue}\n                        addValue={addMaxValue}\n                        title={'max value:'}\n                    />\n                </div>\n                <div className={\"settings-buttons\"}>\n                    <Button\n                        title={'Set'}\n                        addItem={setCounterToStart}\n                        //disabled={DisabledSet}\n                    />\n                </div>\n            </div>\n\n        </div>\n\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}