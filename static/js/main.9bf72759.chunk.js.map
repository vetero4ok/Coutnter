{"version":3,"sources":["Button.tsx","Increments.tsx","Display.tsx","InputSettings.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","onClick","addItem","value","disabled","title","Increments","disabledInc","count","maxValue","error","disabledReset","startValue","className","addInc","resetCounts","Display","useState","errorMessage","setErrorMessage","useEffect","InputSettings","type","min","max","onKeyPress","e","key","setValueSettings","currentTarget","onChange","string","number","JSON","parse","Settings","addValue","App","setCount","setMaxValue","setStartValue","setError","restoreState","defaultState","state","stateAsString","localStorage","getItem","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bf72759.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype PropsButtonType = {\r\n    title: string\r\n    addItem: (value?: number) => void\r\n    value?: number\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const Button = (props: PropsButtonType) => {\r\n    const Items = () => props.addItem(props.value)\r\n    return (\r\n        <button   onClick={Items} disabled={props.disabled}>{props.title} </button>\r\n    );\r\n}","import React from 'react';\r\nimport {Button} from './Button';\r\n\r\n\r\ntype propsIncCountsType = {\r\n    resetCounts: () => void\r\n    addInc: (count: number) => void\r\n    count: number\r\n    startValue: number\r\n    maxValue: number\r\n    error:boolean\r\n}\r\n\r\nexport function Increments(props: propsIncCountsType) {\r\n    const Increments = () => {\r\n        props.addInc(props.count)\r\n    }\r\n    const disabledInc = props.count >= props.maxValue ||props.error\r\n    const disabledReset = props.count === props.startValue|| props.error\r\n\r\n    return (\r\n        <div className={\"settings-buttons\"}>\r\n            <Button\r\n                title={'Inc'}\r\n                addItem={Increments}\r\n                disabled={disabledInc}\r\n            />\r\n            <Button\r\n                title={'Reset'}\r\n                value={props.count}\r\n                addItem={props.resetCounts}\r\n                disabled={disabledReset}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\n\r\ntype PropsDisplayProps = {\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    error: boolean\r\n}\r\n\r\nexport const Display = (props: PropsDisplayProps) => {\r\n    const [errorMessage, setErrorMessage] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        if (props.startValue < props.maxValue) {\r\n            setErrorMessage(`enter values and press \"set\"`)\r\n        } else if (props.startValue >= props.maxValue) {\r\n            setErrorMessage('max value can not be less or equal to start value')\r\n        }\r\n    }, [props.error, props.maxValue, props.startValue])\r\n\r\n    return (\r\n\r\n        <div className={props.count === props.maxValue ? 'text' : 'info'} >\r\n            {props.error ? <h5 className={props.startValue>=props.maxValue? 'massageErrorRed': 'info' } >{errorMessage}</h5>: <h2>{props.count}</h2>}\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\n\r\ntype  InputSettingsProps = {\r\n    value: number\r\n    setValueSettings: (value: number) => void\r\n}\r\n\r\nexport const InputSettings = (props: InputSettingsProps) => {\r\n\r\n\r\n    const onKeyPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.setValueSettings(+e.currentTarget.value)\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let string = e.currentTarget.value\r\n        let number = JSON.parse(string)\r\n        props.setValueSettings(number)\r\n    }\r\n    return (\r\n        <span className=\"input-container\">\r\n            <input\r\n                type=\"number\"\r\n                min=\"0\" max=\"100\"\r\n                value={props.value}\r\n                className={'input'}\r\n                onKeyPress={onKeyPressEnter}\r\n                onChange={onChangeHandler}\r\n            />\r\n        </span>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport {InputSettings} from './InputSettings';\r\n\r\ntype PropsSettingsType = {\r\n    value: number\r\n    title: string\r\n    addValue: (value: number) => void\r\n\r\n}\r\n\r\nexport const Settings = (props: PropsSettingsType) => {\r\n\r\n    return (\r\n\r\n        <div className={'settingsDisplay'}>\r\n            <span className={'title'}>\r\n                {props.title}\r\n            </span>\r\n\r\n            <InputSettings\r\n                value={props.value}\r\n                setValueSettings={props.addValue}\r\n\r\n            />\r\n        </div>\r\n\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Increments} from './Increments';\nimport {Display} from './Display';\nimport {Settings} from './Settings';\nimport {Button} from './Button';\n\n\nfunction App() {\n\n    const [count, setCount] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState(0)\n    const [startValue, setStartValue] = useState(0)\n\n    const [error, setError] = useState<boolean>(false)\n\n    function restoreState<T>(key: string, defaultState: T) {\n        let state = defaultState\n        const stateAsString = localStorage.getItem(key)\n        if (stateAsString !== null) state = JSON.parse(stateAsString) as T\n        return state\n    }\n\n    useEffect(() => {\n        setCount(restoreState<number>('count', 0))\n        setMaxValue(restoreState<number>('maxValue', 0))\n        setStartValue(restoreState<number>('startValue', 0))\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }, [maxValue])\n    useEffect(() => {\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }, [startValue])\n    useEffect(() => {\n        localStorage.setItem('count', JSON.stringify(count))\n    }, [count])\n\n    function addMaxValue(value: number) {\n        setMaxValue(value)\n        setError(true)\n    }\n\n    function addStartValue(value: number) {\n        setStartValue(value)\n        setError(true)\n    }\n\n    function addInc(count: number) {\n        setCount(count + 1)\n    }\n\n    function resetCounts() {\n        setCount(startValue)\n    }\n\n    const setCounterToStart = () => {\n        setCount(startValue)\n        setError(false)\n    }\n\n\n\n    return (\n        <div className={'app'}>\n            <div className={'counter-wrapper'}>\n                <div className={'display'}>\n\n                    <Display\n                        count={count}\n                        maxValue={maxValue}\n                        startValue={startValue}\n                        error={error}\n                    />\n\n\n                </div>\n                <div className={'display-buttons'}>\n                    <Increments\n                        addInc={addInc}\n                        resetCounts={resetCounts}\n                        count={count}\n                        maxValue={maxValue}\n                        startValue={startValue}\n                        error={error}\n\n\n                    />\n                </div>\n\n            </div>\n            <div className={'settings-wrapper'}>\n                <div className=\"settings-displays\">\n                    <Settings\n                        value={startValue}\n                        addValue={addStartValue}\n                        title={'start value:'}\n                    />\n                    <Settings\n                        value={maxValue}\n                        addValue={addMaxValue}\n                        title={'max value:'}\n                    />\n                </div>\n                <div className={'settings-buttons'}>\n                    <Button\n                        title={'Set'}\n                        addItem={setCounterToStart}\n                        disabled={startValue >= maxValue}\n                    />\n                </div>\n            </div>\n\n        </div>\n\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}