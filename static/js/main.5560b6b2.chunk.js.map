{"version":3,"sources":["Redux/counter-reducer.ts","Display.tsx","ButtonComponent.tsx","ItemChanger.tsx","DisplaySettings.tsx","InputComponents.tsx","InputSettings.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","Redux/store.ts","utils/localstorege-utils.ts","index.tsx"],"names":["ACTION_TYPE","initialState","count","maxValue","startValue","error","setErrorAC","type","SET_ERROR","setCountsAC","value","SET_COUNTS","Display","props","useState","errorMessage","setErrorMessage","useEffect","className","ButtonComponent","onClick","addItem","disabled","title","ItemChanger","disabledInc","disabledReset","addInc","resetCounts","DisplaySettings","InputComponents","min","max","onChange","e","setValueSettings","currentTarget","valueAsNumber","InputSettings","addValue","Settings","addStartValue","addMaxValue","setCounterToStart","App","useSelector","state","counter","dispatch","useDispatch","INC_COUNT_ACTION","SET_MAX_VALUE","setMaxValueAC","SET_START_VALUE","setStartValueAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5560b6b2.chunk.js","sourcesContent":["export enum ACTION_TYPE {\r\n    INC_COUNT_ACTION = 'Counter/INC-COUNT',\r\n    SET_MAX_VALUE = 'Counter/SET-MAX-VALUE',\r\n    SET_START_VALUE = 'Counter/SET-START-VALUE',\r\n    SET_ERROR = 'Counter/SET-ERROR',\r\n    SET_COUNTS = 'Counter/SET-COUNTS',\r\n\r\n}\r\n\r\nconst initialState = {\r\n    count: 0,\r\n    maxValue: 0,\r\n    startValue: 0,\r\n    error: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.INC_COUNT_ACTION:\r\n            return {\r\n                ...state,\r\n                count: state.count + 1,\r\n            }\r\n        case ACTION_TYPE.SET_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue,\r\n            }\r\n        case ACTION_TYPE.SET_START_VALUE:\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue,\r\n            }\r\n        case ACTION_TYPE.SET_ERROR :\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n            }\r\n        case ACTION_TYPE.SET_COUNTS:\r\n            return {\r\n                ...state,\r\n                count: action.value,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\ntype ActionType = IncCountActionType\r\n    | SetMaxValueActionType\r\n    | SetStartValueActionType\r\n    | SetErrorActionType\r\n    | SetCountsActionType\r\n\r\n\r\n\r\nexport const incCountAC = () => {\r\n    return {type: ACTION_TYPE.INC_COUNT_ACTION} as const\r\n}\r\nexport const setMaxValueAC = (maxValue: number) => {\r\n    return {type: ACTION_TYPE.SET_MAX_VALUE, maxValue} as const\r\n}\r\nexport const setStartValueAC = (startValue: number) => {\r\n    return {type: ACTION_TYPE.SET_START_VALUE, startValue} as const\r\n}\r\nexport const setErrorAC = (error: boolean) => {\r\n    return {type: ACTION_TYPE.SET_ERROR, error} as const\r\n}\r\nexport const setCountsAC = (value: number) => {\r\n    return {type: ACTION_TYPE.SET_COUNTS, value} as const\r\n}\r\n\r\ntype IncCountActionType = ReturnType<typeof incCountAC>\r\ntype SetMaxValueActionType = ReturnType<typeof setMaxValueAC>\r\ntype SetStartValueActionType = ReturnType<typeof setStartValueAC>\r\ntype SetErrorActionType = ReturnType<typeof setErrorAC>\r\ntype SetCountsActionType = ReturnType<typeof setCountsAC>\r\n","import React, {useEffect, useState} from 'react';\r\n\r\ntype DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    error: boolean\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    const [errorMessage, setErrorMessage] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.startValue < props.maxValue) {\r\n            setErrorMessage(`enter values and press \"set\"`)\r\n        } else if (props.startValue >= props.maxValue) {\r\n            setErrorMessage('max value can not be less or equal to start value')\r\n        }\r\n\r\n        // setErrorMessage(props.startValue < props.maxValue\r\n        //     ? `enter values and press \"set\"`\r\n        //     : 'max value can not be less or equal to start value')\r\n\r\n    }, [props.error, props.maxValue, props.startValue])\r\n\r\n    return (\r\n        <div className={props.count === props.maxValue ? 'text' : 'massageBlackColor'}>\r\n            {props.error\r\n                ?\r\n                <h5 className={props.startValue >= props.maxValue ? 'massageErrorRed' : 'massageBlackColor'}>\r\n                    {errorMessage}\r\n                </h5>\r\n                : <h2>{props.count}</h2>}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\ntype ButtonComponentPropsType = {\r\n    title: string\r\n    addItem: () => void\r\n    disabled: boolean\r\n}\r\nexport const ButtonComponent = (props: ButtonComponentPropsType) => {\r\n    return (\r\n        <button\r\n            onClick={props.addItem}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.title}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\nimport {ButtonComponent} from './ButtonComponent';\r\n\r\n\r\ntype ItemChangerPropsType = {\r\n    resetCounts: () => void\r\n    addInc: () => void\r\n    count: number\r\n    startValue: number\r\n    maxValue: number\r\n    error: boolean\r\n}\r\n\r\nexport function ItemChanger(props: ItemChangerPropsType) {\r\n\r\n    const disabledInc = props.count >= props.maxValue || props.error\r\n    const disabledReset = props.count === props.startValue || props.error\r\n    return (\r\n        <div className={'settings-buttons'}>\r\n            <ButtonComponent\r\n                title={'Inc'}\r\n                addItem={props.addInc}\r\n                disabled={disabledInc}\r\n            />\r\n            <ButtonComponent\r\n                title={'Reset'}\r\n                addItem={props.resetCounts}\r\n                disabled={disabledReset}\r\n            />\r\n        </div>\r\n    );\r\n}","import {Display} from './Display';\r\nimport {ItemChanger} from './ItemChanger';\r\nimport React from 'react';\r\n\r\ntype DisplaySettingsPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    error: boolean\r\n    addInc: () => void\r\n    resetCounts: () => void\r\n}\r\nexport const DisplaySettings = (props: DisplaySettingsPropsType) => {\r\n    return (\r\n        <div className={'counter-wrapper'}>\r\n            <div className={'display'}>\r\n                <Display\r\n                    count={props.count}\r\n                    maxValue={props.maxValue}\r\n                    startValue={props.startValue}\r\n                    error={props.error}\r\n                />\r\n            </div>\r\n            <div className={'display-buttons'}>\r\n                <ItemChanger\r\n                    addInc={props.addInc}\r\n                    resetCounts={props.resetCounts}\r\n                    count={props.count}\r\n                    maxValue={props.maxValue}\r\n                    startValue={props.startValue}\r\n                    error={props.error}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\n\r\ntype  InputSettingsProps = {\r\n    value: number\r\n    setValueSettings: (value: number) => void\r\n}\r\nexport const InputComponents = (props: InputSettingsProps) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setValueSettings(e.currentTarget.valueAsNumber)\r\n    }\r\n    return (\r\n        <span className=\"input-container\">\r\n            <input\r\n                type=\"number\"\r\n                min=\"0\" max=\"100\"\r\n                value={props.value}\r\n                className={'input'}\r\n                onChange={onChangeHandler}\r\n            />\r\n        </span>\r\n    );\r\n}","import React from 'react';\r\nimport {InputComponents} from './InputComponents';\r\n\r\ntype InputSettingsPropsType = {\r\n    value: number\r\n    title: string\r\n    addValue: (value: number) => void\r\n\r\n}\r\n\r\nexport const InputSettings = (props: InputSettingsPropsType) => {\r\n\r\n    return (\r\n        <div className={'settingsDisplay'}>\r\n            <span className={'title'}>\r\n                {props.title}\r\n            </span>\r\n            <InputComponents\r\n                value={props.value}\r\n                setValueSettings={props.addValue}\r\n            />\r\n        </div>\r\n    );\r\n}","import {InputSettings} from './InputSettings';\r\nimport {ButtonComponent} from './ButtonComponent';\r\nimport React from 'react';\r\n\r\ntype SettingsPropsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    addMaxValue: (value: number) => void\r\n    setCounterToStart: () => void\r\n    addStartValue: (value: number) => void\r\n}\r\n\r\nexport const Settings = (props: SettingsPropsType) => {\r\n    return (\r\n        <div className={'settings-wrapper'}>\r\n            <div className={'settings-displays'}>\r\n                <InputSettings\r\n                    value={props.startValue}\r\n                    addValue={props.addStartValue}\r\n                    title={'start value:'}\r\n                />\r\n                <InputSettings\r\n                    value={props.maxValue}\r\n                    addValue={props.addMaxValue}\r\n                    title={'max value:'}\r\n                />\r\n            </div>\r\n            <div className={'settings-buttons'}>\r\n                <ButtonComponent\r\n                    title={'Set'}\r\n                    addItem={props.setCounterToStart}\r\n                    disabled={props.startValue >= props.maxValue}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from './Redux/store';\nimport {incCountAC, setCountsAC, setErrorAC, setMaxValueAC, setStartValueAC} from './Redux/counter-reducer';\nimport {DisplaySettings} from './DisplaySettings';\nimport {Settings} from './Settings';\n\n\nfunction App() {\n    const count = useSelector<AppStateType, number>(state => state.counter.count)\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\n    const startValue = useSelector<AppStateType, number>(state => state.counter.startValue)\n    const error = useSelector<AppStateType, boolean>(state => state.counter.error)\n\n    const dispatch = useDispatch()\n\n    function addMaxValue(value: number) {\n        dispatch(setMaxValueAC(value))\n        dispatch(setErrorAC(true))\n    }\n\n    function addStartValue(value: number) {\n        dispatch(setStartValueAC(value))\n        dispatch(setErrorAC(true))\n    }\n\n    function addInc() {\n        dispatch(incCountAC())\n    }\n\n    function resetCounts() {\n        dispatch(setCountsAC(startValue))\n    }\n\n    const setCounterToStart = () => {\n        dispatch(setCountsAC(startValue))\n        dispatch(setErrorAC(false))\n    }\n\n    return (\n        <div className={'app'}>\n            <DisplaySettings\n                error={error}\n                maxValue={maxValue}\n                startValue={startValue}\n                count={count}\n                addInc={addInc}\n                resetCounts={resetCounts}\n            />\n            <Settings\n                startValue={startValue}\n                maxValue={maxValue}\n                addMaxValue={addMaxValue}\n                addStartValue={addStartValue}\n                setCounterToStart={setCounterToStart}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\r\nimport {loadState, saveState} from '../utils/localstorege-utils';\r\nimport {counterReducer} from './counter-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n     counter:store.getState().counter\r\n    })\r\n})\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n\r\n","import {AppStateType} from '../Redux/store';\r\n// localStorage\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n// localStorage\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}